{
    "compilerOptions": {
      /* Language and Environment */
      "target": "ES2020" /* Set the JavaScript language version for emitted JavaScript */,
      "lib": [
        "ES2020",
        "DOM",
        "DOM.Iterable"
      ] /* Specify a set of bundled library declaration files */,
      "module": "ESNext" /* Specify what module code is generated */,
      "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier */,
  
      /* JavaScript Support */
      "allowJs": true /* Allow JavaScript files to be compiled */,
      "checkJs": false /* Enable error reporting in type-checked JavaScript files */,
  
      /* Emit */
      "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files */,
      "declarationMap": true /* Create sourcemaps for d.ts files */,
      "outDir": "./dist" /* Specify an output folder for all emitted files */,
      "rootDir": "./src" /* Specify the root folder within your source files */,
      "removeComments": false /* Disable emitting comments */,
      "sourceMap": true /* Create source map files for emitted JavaScript files */,
      "inlineSourceMap": false /* Include sourcemap files inside the emitted JavaScript */,
      "importHelpers": true /* Allow importing helper functions from tslib once per project */,
  
      /* Interop Constraints */
      "isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports */,
      "allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export */,
      "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules */,
      "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports */,
  
      /* Type Checking */
      "strict": true /* Enable all strict type-checking options */,
      "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type */,
      "strictNullChecks": true /* When type checking, take into account 'null' and 'undefined' */,
      "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible */,
      "strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function */,
      "strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor */,
      "noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any' */,
      "useUnknownInCatchVariables": true /* Default catch clause variables as 'unknown' instead of 'any' */,
      "alwaysStrict": true /* Ensure 'use strict' is always emitted */,
      "noUnusedLocals": true /* Enable error reporting when local variables aren't read */,
      "noUnusedParameters": true /* Raise an error when a function parameter isn't read */,
      "exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined' */,
      "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function */,
      "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements */,
      "noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index */,
      "noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier */,
      "noPropertyAccessFromIndexSignature": false /* Enforces using indexed accessors for keys declared using an indexed type */,
  
      /* Completeness */
      "skipDefaultLibCheck": false /* Skip type checking .d.ts files that are included with TypeScript */,
      "skipLibCheck": true /* Skip type checking all .d.ts files */,
  
      /* Advanced Options */
      "resolveJsonModule": true /* Enable importing .json files */,
      "preserveConstEnums": true /* Disable erasing 'const enum' declarations in generated code */,
      "experimentalDecorators": true /* Enable experimental support for TC39 stage 2 draft decorators */,
      "emitDecoratorMetadata": true /* Emit design-type metadata for decorated declarations in source files */,
  
      /* Path Mapping */
      "baseUrl": "./" /* Specify the base directory to resolve non-relative module names */,
      "paths": {
        "@/*": ["src/*"] /* Map '@' to src directory */,
        "@utils/*": ["src/utils/*"] /* Map '@utils' to src/utils directory */,
        "@types/*": ["src/types/*"] /* Map '@types' to src/types directory */
      }
    },
  
    /* Include and Exclude */
    "include": [
      "src/**/*" /* Include all files in src directory */,
      "tests/**/*" /* Include all test files */,
      "*.ts" /* Include TypeScript files in root */,
      "*.tsx" /* Include TypeScript React files in root */
    ],
  
    "exclude": [
      "node_modules" /* Exclude node_modules */,
      "dist" /* Exclude build output */,
      "build" /* Exclude build directory */,
      "coverage" /* Exclude test coverage */,
      "**/*.spec.ts" /* Exclude test files from compilation (optional) */,
      "**/*.test.ts" /* Exclude test files from compilation (optional) */
    ],
  
    /* TypeScript 4.9+ Project References Support */
    "references": [],
  
    /* Watch Options */
    "watchOptions": {
      "watchFile": "useFsEvents" /* How to watch individual files */,
      "watchDirectory": "useFsEvents" /* How to watch directories */,
      "fallbackPolling": "dynamicPriority" /* Fallback polling strategy */,
      "synchronousWatchDirectory": true /* Synchronously call callbacks and update the state of directory watchers */,
      "excludeDirectories": ["**/node_modules", "dist", "build"]
    },
  
    /* TypeScript Project Options */
    "compileOnSave": false /* Enable Compile-on-Save for this project */,
  
    /* Additional Options for Development */
    "ts-node": {
      "esm": true /* Enable ESM support in ts-node */,
      "experimentalSpecifierResolution": "node" /* Enable Node.js style module resolution */
    }
  }
  